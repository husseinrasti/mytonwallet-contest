default_platform(:android)

def update_version_and_build_number
  beta_build_number = google_play_track_version_codes(
   package_name: CredentialsManager::AppfileConfig.try_fetch_value(:package_name),
   track: "beta",
   json_key: CredentialsManager::AppfileConfig.try_fetch_value(:json_key_file),
  )[0]

  production_build_number = google_play_track_version_codes(
   package_name: CredentialsManager::AppfileConfig.try_fetch_value(:package_name),
   track: "production",
   json_key: CredentialsManager::AppfileConfig.try_fetch_value(:json_key_file),
  )[0]

  build_number = [beta_build_number, production_build_number].max() + 1
  version = JSON.parse(File.read("../../../package.json"))["version"]

  android_set_version_name(version_name: version)
  android_set_version_code(version_code: build_number)
end

platform :android do
  desc "Deploy a new Beta Build to the Google Play"

  $gradle_data = nil

  before_all do |lane|
    $gradle_data = File.read("../app/build.gradle")
  end

  $keystore_path = Dir.pwd + "/../android.keystore"

  lane :beta do
    update_version_and_build_number

    gradle(
      task: "clean bundle",
      build_type: "Release",
      properties: {
        "android.injected.signing.store.file" => $keystore_path,
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => "key0",
        "android.injected.signing.key.password" => ENV["ANDROID_KEYSTORE_PASSWORD"]
      }
    )

    upload_to_play_store(track: "beta", skip_upload_apk: true)
  end

  desc "Release a new version to the Google Play"
  lane :release do
    update_version_and_build_number

    gradle(
      task: "clean bundle",
      build_type: "Release",
      properties: {
        "android.injected.signing.store.file" => $keystore_path,
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => "key0",
        "android.injected.signing.key.password" => ENV["ANDROID_KEYSTORE_PASSWORD"]
      }
    )

    upload_to_play_store(track: "production", skip_upload_apk: true)
  end

  lane :direct do
    update_version_and_build_number

    gradle(
      task: "clean assemble",
      build_type: "Release",
      properties: {
        "android.injected.signing.store.file" => $keystore_path,
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => "key0",
        "android.injected.signing.key.password" => ENV["ANDROID_KEYSTORE_PASSWORD"]
      }
    )
  end

  after_all do |lane|
    File.write("../app/build.gradle", $gradle_data)
  end

  error do |lane, exception|
    File.write("../app/build.gradle", $gradle_data)
  end
end
